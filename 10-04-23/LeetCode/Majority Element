########################### MY SOLUTION ###############################


import java.util.*;
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer , Integer> map = new HashMap<>();
        int n = nums.length;
        for( int i = 0 ;  i < nums.length ; i++){
            //   map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            if( map.containsKey(nums[i])){
                map.put(nums[i] , map.get(nums[i])+1);
            }else{
                map.put(nums[i] , 1);
            }
        }
        //  Map<Integer,Integer> mp = new HashMap<>();

        // int n = nums.length;
        // for(int i = 0;i < n;i++){
        //     mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        // }

        // for(int i = 0;i < n;i++){
        //     if(mp.get(nums[i]) > (n/2)){
        //         return nums[i];
        //     }
        // }
        // return 0;
        // for( int key : map.keySet()){
        //    if( map.get(key)>n/3) System.out.println(key);
            
        // }
        for( int i = 0 ; i < n ; i++){
            if(map.get(nums[i]) > (n/2)){
            return nums[i];
            }
        }
        return 0;
    }
}




############################ BRUTE FORCE SOLUTION ################################


class Solution {
    public int majorityElement(int[] nums) {
        int maj = 0;
        for(int i = 0; i < nums.length;i++)
        {
            int count = 0;
            for(int j = i; j < nums.length;j++)
            {
                if(nums[j] == nums[i])
                {
                    count++;
                }
            }
            if(count > nums.length/2)
            {
                maj = nums[i];
            }
        }
        return maj;
    }
}

########################## HASHMAP ###############################



// Optimized Method Using Map
class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer,Integer> mp = new HashMap<>();

        int n = nums.length;
        for(int i = 0;i < n;i++){
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        }

        for(int i = 0;i < n;i++){
            if(mp.get(nums[i]) > (n/2)){
                return nums[i];
            }
        }
        return 0;
    }
}



########################################## SORTING ##############################################



// More Optimized - Sorting 
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        
        int count = 1;

        for(int i =0;i < nums.length;i++){
            if(count > (nums.length/2)){
                return nums[i];
            }
            if(nums[i] == nums[i+1]){
                count++;
            }else{
                count = 1;
            }
        }
        return 0;
    }
}


################################## BIT MANIPULATION ################################

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int majority_element = 0;

        for (int i = 0; i < 32; i++) {
            int bit = 1 << i;

            // Count how many numbers have this bit set.
            int bit_count = 0;
            for (int num : nums) {
                if ((num & bit) != 0) {
                    bit_count++;
                }
            }

            // If this bit is present in more than n / 2 elements
            // then it must be set in the majority element.
            if (bit_count > n / 2) {
                majority_element |= bit;
            }
        }

        return majority_element;
    }
}




################################# RANDOMIZATION ###############################


class Solution {
    private int randRange(Random rand, int min, int max) {
        return rand.nextInt(max - min) + min;
    }

    private int countOccurences(int[] nums, int num) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    public int majorityElement(int[] nums) {
        Random rand = new Random();

        int majorityCount = nums.length/2;

        while (true) {
            int candidate = nums[randRange(rand, 0, nums.length)];
            if (countOccurences(nums, candidate) > majorityCount) {
                return candidate;
            }
        }
    }
}







########################## DIVIDE AND CONQUER #################################

class Solution {
    private int countInRange(int[] nums, int num, int lo, int hi) {
        int count = 0;
        for (int i = lo; i <= hi; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    private int majorityElementRec(int[] nums, int lo, int hi) {
        // base case; the only element in an array of size 1 is the majority
        // element.
        if (lo == hi) {
            return nums[lo];
        }

        // recurse on left and right halves of this slice.
        int mid = (hi-lo)/2 + lo;
        int left = majorityElementRec(nums, lo, mid);
        int right = majorityElementRec(nums, mid+1, hi);

        // if the two halves agree on the majority element, return it.
        if (left == right) {
            return left;
        }

        // otherwise, count each element and return the "winner".
        int leftCount = countInRange(nums, left, lo, hi);
        int rightCount = countInRange(nums, right, lo, hi);

        return leftCount > rightCount ? left : right;
    }

    public int majorityElement(int[] nums) {
        return majorityElementRec(nums, 0, nums.length-1);
    }
}
