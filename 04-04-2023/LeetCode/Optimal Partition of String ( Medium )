//My Solution 


class Solution {
    public int partitionString(String s) {
    //    //partition of string 
     //  int count = 0;
    //    //converted string into the charcter array
    //    char ch[] = s.toCharArray();
    //    //traverse in character array
    //    for( int i = 0 ; i < ch.length -1; i++){
    //        if( ch[i] != ch[i+1]) continue;
    //        count++;
    //    }
       
    //    //corner case

    //using hashmap
    // char ch[] = s.toCharArray();
    // HashSet<Character> map = new HashSet<Character>();
    
    // for( int i = 0 ; i < ch.length ; i++){
    //     map.add(ch[i]);
    //   if( map.contains(ch[i]))count++;
    // }  
    //  return count;  
    

    int count=(s.isEmpty())? 0:1;

     char ch[] = s.toCharArray();
    HashSet<Character> map = new HashSet<Character>();
    
    for( int i = 0 ; i < ch.length ; i++){
       
      if( map.contains(ch[i])){
        
          map.clear();
          count++;
      }
       map.add(ch[i]);
    
    }  
     return count;  

    }
}




ANOTHER APPROACHES

2) ################### USING HASHMAP ############
class Solution {
    public int partitionString(String s) {
        int idx = 0;
        int count = 0;
        Map<Character, Boolean> mp = new HashMap<>(); // use a HashMap instead of an unordered_map
        while (idx < s.length()) {
            if (mp.containsKey(s.charAt(idx))) { // if current character has already appeared in current substring
                count++; // increment count
                mp.clear(); // clear HashMap to start a new substring
            }
            mp.put(s.charAt(idx), true); // mark current character as seen
            idx++; // move to next character
        }
        return count + 1; // return number of substrings (add 1 because we need to count the last substring as well)
    }
}




3)###################### USING SET #####################

class Solution {
    public int partitionString(String s) {
        Set<Character> set = new HashSet<>();
        int res = 1;
        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);
            if(!set.add(ch)) {
                res++;
                set.clear();
                set.add(ch);
            }
        }
        return res;
    }
}


4) ####################  Greedy+Bit Manipulation  #################


class Solution {
    public int partitionString(String s) {
        int xr=0;
        int ans=1;
        for(char c : s.toCharArray()){
            if((xr & (1<<c))!=0){
                xr=0;
                ans++;
            }
            xr^=(1<<c);
        }
        return ans;
    }
}


5) ############ USING LOOP #############

class Solution {
    public int partitionString(String s) {
        int[] last_pos = new int[26];
        int partitions = 0;
        int last_end = 0;
        for (int i = 0; i < s.length(); i++) {
            if (last_pos[s.charAt(i) - 'a'] >= last_end) {
                partitions++;
                last_end = i + 1;
            }
            last_pos[s.charAt(i) - 'a'] = i + 1;
        }
        return partitions;
    }
}

6) ################# BIT MANIPULATION #####################

    public int partitionString(String s) {
         int map = 0;
        int count = 1;
        for(char c : s.toCharArray()){
            if((map & (1<<c)) != 0) {
                count++;
                map = 0;
            }
            map ^= (1<<c);
        }
        return count;
}

