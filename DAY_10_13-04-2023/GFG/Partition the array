
//User function Template for Java
class Solution 
{ 
//     long minDifference(int N, int A[]) 
//     { 
//         //first create the array for stroring the prefix sum
//         long[] prefixSums = new long[N+1];
//         //first prefix sum is zero hrnce array element is arraylength+1
//         prefixSums[0]=0;
//         for( int i= 1; i <= N ; i++){
//             prefixSums[i] = prefixSums[i-1] +A[i-1];
//         }
//         //sum of all elements of the prefix sum is initialize to the smallestDifference
//         long smalldiff = prefixSums[N];
        
//         //ITERATE ALL PARTITION OF THE ARRAY P,Q,R,S
//         for( int i = 1 ; i < N-2 ; i++){
//             //calculate the minsum and maxsum of P,Q
//             MinMaxPair leftMinMax =  getMinMaxSums(prefixSums, 1,i+1);
//             //calculate the minsum and maxsum of R,S
//             MinMaxPair leftMinMax =  getMinMaxSums(prefixSums, i+2,N);
//             //calculate the maximum and minimum sums of the four partitions
//             long maxSumPQ = leftMinMax.maxSum;
//             long maxSumRS = rightMinMax.maxSum;
//             long maxSumPQ = leftMinMax.minSum;
//             long maxSumRS = rightMinMax.minSum;
//             //calculate the absoulte differnece between the maximun and minimm sum
//             long absouluteDiff = Math.abs(Math.max(maxSumPQ , maxSumRS)- Math.min(minSumPQ, minSumRS));
//             //update the smallest diff
//             smalldifff = Math.min(smalldiff, absouluteDiff);
            
//         }
//         return  smalldifff;
//     }
// } static class MinMaxPair{
//     long minSum,maxSum;
//     public MinMaxPair(long minSum, long maxSum){
//         this.minSum = minSum;
//         this.maxSum = maxSum;
//     }
// }
// static MinMaxPair getMinMaxSums(long[] prefixSums , int left , int right){
//     //initialize pointers lo and hi for binary  search 
//     int lo = left , hi = right -1;
//     long minSum =  0 , maxSum = prefixSums[right] - prefixSums[left-1];
//     while(lo <= hi){
//         int mid = lo +(hi-lo)/2;
//         long leftSum = prefixSum[mid] - prefixSum[left-1];
//         long rightSum = prefixsums[right] - prefixSums[mid];
//         if( Math.abs(rightSum - leftSum) < maxSum - minSum){
//             minSum = Math.min(leftSum , rightSum);
//             maxSum = Math.Max(leftSum, rightSum);
//         }
//         if( leftSum <rightSum ){
//             lo =mid +1;
//         }else{
//             hi = mid-1;
//         }
//     }



long minDifference(int N, int A[]) 
    { 
        // code here
         // Array to store prefix sums
        long[] prefixSums = new long[N + 1];
        // Calculate prefix sums
        prefixSums[0] = 0;
        for (int i = 1; i <= N; i++) {
            prefixSums[i] = prefixSums[i - 1] + A[i - 1];
        }
        // Initialize smallest difference to the sum of all elements
        long smallestDifference = prefixSums[N];
        // Iterate over all possible partitions P, Q, R, S of the array
        for (int i = 1; i < N - 2; i++) {
            // Calculate the minimum and maximum sums of P and Q
            MinMaxPair leftMinMax = getMinMaxSums(prefixSums, 1, i + 1);
            // Calculate the minimum and maximum sums of R and S
            MinMaxPair rightMinMax = getMinMaxSums(prefixSums, i + 2, N);
            // Calculate the maximum and minimum sums of the four partitions
            long maxSumPQ = leftMinMax.maxSum;
            long maxSumRS = rightMinMax.maxSum;
            long minSumPQ = leftMinMax.minSum;
            long minSumRS = rightMinMax.minSum;
            // Calculate the absolute difference between the maximum and minimum sums
            long absoluteDifference = Math.abs(Math.max(maxSumPQ, maxSumRS) - Math.min(minSumPQ, minSumRS));
            // Update the smallest difference if necessary
            smallestDifference = Math.min(smallestDifference, absoluteDifference);
        }
        // Return the smallest difference
        return smallestDifference;
    }
    
     static class MinMaxPair {
        long minSum, maxSum;
        public MinMaxPair(long minSum, long maxSum) {
            this.minSum = minSum;
            this.maxSum = maxSum;
        }
    }
    
    static MinMaxPair getMinMaxSums(long[] prefixSums, int left, int right) {
       // Initialize pointers lo and hi for binary search
        int lo = left, hi = right - 1;
        // Initialize minSum and maxSum to the minimum and maximum prefix sums of the entire range
        long minSum = 0, maxSum = prefixSums[right] - prefixSums[left - 1];
        // Perform binary search to find the minimum and maximum prefix sums
        while (lo <= hi) {
            // Calculate the prefix sum of the midpoint
            int mid = lo + (hi - lo) / 2;
            long leftSum = prefixSums[mid] - prefixSums[left - 1];
            long rightSum = prefixSums[right] - prefixSums[mid];
            /* Update minSum and maxSum if the absolute difference between the two sums is 
            smaller than the current difference*/
            if (Math.abs(rightSum - leftSum) < maxSum - minSum) {
                minSum = Math.min(leftSum, rightSum);
                maxSum = Math.max(leftSum, rightSum);
            }
            // If leftSum is smaller than rightSum, move the lo pointer to the right of the midpoint
            if (leftSum < rightSum) {
                lo = mid + 1;
            } 
            // Otherwise, move the hi pointer to the left of the midpoint
            else {
                hi = mid - 1;
            }
        }
        return new MinMaxPair(minSum, maxSum);
    }


}

