####################### MY SOLUTION ########################

class Solution {
    public boolean isValid(String s) {
        //create a stack 
        Stack<Character> stack = new Stack<>();
        //char[] c = s.toCharArray();
       // for( int i = 0 ; i < c.length ; i++){
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else {
                //if stack is empty then return the false
                if (stack.empty()) {
                    return false;
                }
                if (c == ')' && stack.peek() == '(') {
                    stack.pop();
                } else if (c == '}' && stack.peek() == '{') {
                    stack.pop();
                } else if (c == ']' && stack.peek() == '[') {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return stack.empty();
    }
}



###################### ANOTHER APPROACH ####################################



class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char ch: s.toCharArray()){
            switch(ch) {
                case '(' : 
                    stack.push('(');
                    break;
                case '{' : 
                    stack.push('{');
                    break;
                case '[' : 
                    stack.push('[');
                    break;
                case ')' : 
                    if(stack.isEmpty()) return false;
                    if(stack.pop() != '('){
                        return false;
                    }
                    break;
                case '}' : 
                    if(stack.isEmpty()) return false;
                    if(stack.pop() != '{'){
                        return false;
                    }
                    break;
                case ']' : 
                    if(stack.isEmpty()) return false;
                    if(stack.pop() != '['){
                        return false;
                    }
                    break;
            }
        }
        return stack.isEmpty() == true;
    }
}
