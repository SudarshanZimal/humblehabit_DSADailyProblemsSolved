

/*
// node structure:

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

*/

class Solution{
       static int sum = 0;
       static void add_subtree(Node n, int dist){
        if( (n==null) || (dist<0) ) return;
        sum += n.data;
        add_subtree(n.left, dist-1);
        add_subtree(n.right, dist-1);
    }
    //   static void traverse(Node root){
    //       if( root == null)return ;
    //         traverse(root.left);
    //         sum+=root.data;
    //         traverse(root.right);
    //         sum+=root.data;
            // traverse(home.left);
            // sum+=home.data;
            // traverse(home.right);
            // sum+=home.data;
        // }
        static int traverse(Node n, int target, int k){
        if(n==null) return -1;
        if(n.data==target)
        {
            add_subtree(n, k);
            return k-1;
        }
        
        int dist = traverse(n.left, target, k);
        if(dist>-1)
        {
            sum += n.data;
            add_subtree(n.right, dist-1);
            return dist-1;
        }
        
        dist = traverse(n.right, target, k);
        if(dist>-1)
        {
            sum += n.data;
            add_subtree(n.left, dist-1);
            return dist-1;
        }
        
        return -1;
    }
        // static void traverse(Node home){
         
        //     traverse(home.left);
        //     sum+=home.data;
        //     traverse(home.right);
        //     sum+=home.data;
        // }
    static int ladoos(Node root, int home, int k){
        // Your code goes here
        
        // for(int i = 0 ; i < k ; i++){
        //       traverse(root);
        //       traverse(home);
              
        // }
        // return sum;
         sum = 0;
        traverse(root, home, k);
        return sum;
    }
}
